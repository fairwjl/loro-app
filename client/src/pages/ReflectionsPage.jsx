import { useState } from "react";

// Never put your OpenAI key in the client.
// Use the server endpoint and the dev env base URL.
const API_BASE =
  import.meta.env.VITE_API_BASE?.replace(/\/$/, "") || "http://localhost:8787";

const CRISIS_KEYWORDS = [
  'kill myself', 'suicide', 'suicidal', 'end my life', 'want to die',
  'better off dead', 'no reason to live', 'can\'t go on',
  'hurt myself', 'self harm', 'cutting', 'overdose',
  'kill him', 'kill her', 'kill them', 'hurt someone', 'murder',
  'abuse', 'molest', 'rape', 'sexual abuse'
];

function containsCrisisContent(text) {
  const lower = text.toLowerCase();
  return CRISIS_KEYWORDS.some(keyword => lower.includes(keyword));
}

export default function Journal() {
  const [text, setText] = useState("");
  const [reply, setReply] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  async function reflect() {
    if (!text.trim() || loading) return;
    
    // Check for crisis content
    if (containsCrisisContent(text)) {
      setError("");
      setReply("");
      setReply(
        "I noticed your entry contains content that may indicate you're in crisis. " +
        "This reflection tool is not designed for crisis situations and cannot provide appropriate support.\n\n" +
        "If you're thinking about harming yourself or others, please:\n" +
        "• Call 911 (U.S.) or your local emergency number\n" +
        "• Call or text 988 (Suicide & Crisis Lifeline)\n" +
        "• Contact your therapist immediately\n" +
        "• Go to your nearest emergency room\n\n" +
        "Your entry has NOT been sent or saved."
      );
      setText(""); // Clear the input
      return;
    }
    
    setLoading(true);
    setError("");
    setReply("");

    try {
      const res = await fetch(`${API_BASE}/reflect`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ entry: text.trim() }),
      });

      if (!res.ok) {
        const msg = await res.text();
        throw new Error(msg || `HTTP ${res.status}`);
      }

      const data = await res.json();
      setReply(data.reflection || "");
    } catch (e) {
      setError("Sorry, I couldn't generate a reflection right now.");
    } finally {
      setLoading(false);
    }
  }

  return (
    <div>
      <h2 className="section-title">Reflections</h2>
      <p className="card-text">
        A quiet space for reflections. Write freely, then receive gentle feedback
        grounded in supportive, evidence-informed guidance.
      </p>

      <p className="note" style={{ marginTop: 6, color: "#4a5e54" }}>
        If emotions rise while writing, it's okay to pause and try a grounding step
        (for example, 5-4-3-2-1, a short walk, or a few slow breaths). Resume when ready.
      </p>

      <div
        style={{
          backgroundColor: "var(--accent-muted)",
          border: "1px solid var(--accent)",
          borderRadius: 8,
          padding: 12,
          marginTop: 12,
          fontSize: 14,
          lineHeight: 1.5,
          color: "var(--text)",
        }}
      >
        <strong>This is not crisis support:</strong> Entries indicating harm to self or others 
        will be blocked and not processed. This tool is for general reflection only. 
        For crisis support, call 911 or text/call 988.
      </div>

      <div className="panel">
        <div className="form-row">
          <label htmlFor="reflection-input" className="sr-only">
            Your reflection
          </label>
          <textarea
            id="reflection-input"
            rows={8}
            placeholder="Write what's on your mind..."
            value={text}
            onChange={(e) => setText(e.target.value)}
            style={{ borderRadius: 12 }}
          />
        </div>

        <div className="controls-row">
          <button
            className="btn btn-primary"
            onClick={reflect}
            disabled={!text.trim() || loading}
            aria-busy={loading ? "true" : "false"}
          >
            {loading ? "Reflecting…" : "Reflect"}
          </button>
        </div>

        {error && (
          <p className="note" role="alert" style={{ marginTop: 10 }}>
            {error}
          </p>
        )}

        {reply && (
          <div className="panel" style={{ marginTop: 16 }}>
            <h3 className="card-title">Your Reflection</h3>
            <p className="card-text" style={{ whiteSpace: "pre-wrap" }}>{reply}</p>
          </div>
        )}
      </div>

      <div
        style={{
          backgroundColor: "#f7f7f7",
          border: "1px solid #e5e5e5",
          borderRadius: "8px",
          padding: "12px",
          marginTop: "20px",
          fontSize: "12px",
          lineHeight: "1.45",
          color: "#333",
        }}
      >
        <strong>Important Disclaimer:</strong> The reflections and responses
        provided here are generated by artificial intelligence. They are for{" "}
        <em>self-reflection and educational purposes only</em> and are{" "}
        <strong>
          not medical advice, psychotherapy, or a substitute for professional
          care
        </strong>
        .
        <br />
        <br />
        Do not enter personal identifiers or Protected Health Information (PHI).
        Always consult a qualified healthcare professional for diagnosis or
        treatment of mental health conditions.
      </div>
    </div>
  );
}